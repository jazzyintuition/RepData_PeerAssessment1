sapply(split(mtcars$hp, mtcars$cyl), mean)
diff(sapply(split(mtcars$hp, mtcars$cyl), mean))
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(x[1] - x[3])
debug(ls)
ls
ls
debug(ls)
ls()
exit
stop
q
quit
save
exit
close
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- numeric(1:10)
x <- c(1:10)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
Dog <- function(name = "Fido", barkType = "Woof!") {
noOfBarks <- numeric(1)
updateBarkNumber <- function() noOfBarks <<- sample(1:10, 1)
updateBarkNumber()
}
Dog()
fido <- Dog()
fido$bark()
updateBarkNumber
noOfBarks
Dog <- function(name = "Fido", barkType = "Woof!") {
noOfBarks <- numeric(1)
updateBarkNumber <- function() noOfBarks <<- sample(1:10, 1)
updateBarkNumber()
print(noOfBarks)
}
Dog()
Dot()
Dog()
x$set
x$get
cachemean(5)
sqrmatrix <- matrxi(1:25, 5, 5)
sqrmatrix <- matrix(1:25, 5, 5)
sqrmatrix
solve(sqrmatrix)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+")}
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
sh8
A <- hilbert(4)
A[] <- as.complex(A)
solve(A)
makeVector()
testmean <- makeVector()
testmean$set()
testmean$set(10)
vec <- c(1:10)
testmean$set(vec)
testmean$getmean(vec)
testmean$getmean
testmean$get(vec)
testmean$get
testmean$get()
testmean$setmean()
cachemean(vec)
makeVector(10)
testvector <- makeVector(10)
testvector$get()
testvector$get(9)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
x <- c(1:10)
testmean <- makeVector(x)
testmean$set()
makeVector(x)
testmean$set(x)
testmean$get()
testmean$set()
testmean$setmean()
testmean$setmean(x)
testmean$getmean(x)
testmean$getmean()
testmean$setmean(x)
testmean$getmean()
makeVector(x = 10)
testvector <- makeVector(x = 5)
testvector$set()
testvector$set(10)
testvector$get()
testvector$set(1:5)
testvector$get()
testvector$setmean()
testvector$setmean(mean(x))
testvector$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
mary <- function(n) { i <- 1:n; 2*i}
mary3(3)
mary3 <- mary(3)
mary3
mary <- function(n) { i <- 1:n; 2 * outer(i-1, i, "+")}
mary3 <- mary(3)
mary3
invmary3 <- solve(mary3)
col1 <- c(4, 2)
col2 <- c(7, 6)
mymatrix <- matrix(col1, col2)
mymatrix <- matrix(2, 2, c(4, 7, 2, 6))
mymatrix
mymatrix <- matrix(c(4, 7, 2, 6), 2, 2)
mymatrix
mymatrix <- matrix(c(4, 2, 7, 6), 2, 2)
mymatrix
solve(mymatrix)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean(x)
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
tstmean2 <- makeVector(x)
tstmean2$set(x)
tstmean2$get()
tstmean2$setmean(x)
tstmean2$getmean()
cachemean(x)
caching <- cachemean(x)
makeVector(x)
x$set(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean(x)
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean(x)
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector(1:10)
x$set(1:10)
$set(1:10)
set(1:10)
set()
makeVector(x = 1:10)
set(x)
x <- c(1:10)
testvector <- makeVector(x)
testvector$set(x)
testvector$get()
testvector$setmean(x)
testvector$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(testvector)
x <- matrix(c(4, 2, 7, 6), 2, 2)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve(x)
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
mymatrix <- makeCacheMatrix(x)
mymatrix$set(x)
mymatrix$get()
mymatrix$setinverse(x)
mymatrix$getinverse()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(mymatrix)
cacheSolve(mymatrix2)
seconddata <- matrix(c(2, 4, 1, 3), 2, 2)
mymatrix2 <- makeCacheMatrix(seconddata)
cacheSolve(seconddata)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve(x)
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
amatrix <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0, 5, 99, 66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
p <- makeCacheMatrix(matrix(c(11:14) nrow = 2, ncol = 2))
p <-makeCacheMatrix(matrix(11:14, 2, 2))
cacheSolve(p)
mm <- makeCacheMatrix(matrix(rnorm(16), 4, 4))
cacheSolve(mm)
mm$get()
mm$getinverse()
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("ggplot2")
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(movies)
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(data.table)
activity <- fread("activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.factor(activity$interval)
setwd("~/Documents/Coursera/workfiles/RepData_PeerAssessment1")
library(data.table)
activity <- fread("activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.factor(activity$interval)
average.interval <- activity[complete.cases(activity), ]
average.interval <- ddply(activity, .(interval), summarise, mean_steps = mean(steps, na.rm = TRUE))
average.interval$interval2 <- as.integer(as.character(average.interval$interval))
NewActivity <- activity
for(i in 1:17568)
if(is.na(NewActivity$steps[i]) == TRUE) {
NewActivity$steps[i] <- average.interval$mean_steps[NewActivity$interval[i]==average.interval$interval]
}
for(i in 1:17568)
if(is.na(NewActivity$steps[i])) == TRUE) {
NewActivity$steps[i] <- average.interval$mean_steps[NewActivity$interval[i]==average.interval$interval]
}
head(average.interval)
head(NewActivity)
NewActivity <- activity
for(i in 1:17568)
if(is.na(NewActivity$steps[i]) == TRUE) {
NewActivity$steps[i] <- average.interval$mean_steps[NewActivity$interval[i]==average.interval$interval]
}
average.interval <- activity[complete.cases(activity), ]
average.interval <- ddply(activity, .(interval), summarise, mean_steps = mean(steps, na.rm = TRUE))
average.interval$interval2 <- as.integer(as.character(average.interval$interval))
library(plyr)
average.interval <- activity[complete.cases(activity), ]
average.interval <- ddply(activity, .(interval), summarise, mean_steps = mean(steps, na.rm = TRUE))
average.interval$interval2 <- as.integer(as.character(average.interval$interval))
head(average.interval)
NewActivity <- activity
for(i in 1:17568)
if(is.na(NewActivity$steps[i]) == TRUE) {
NewActivity$steps[i] <- average.interval$mean_steps[NewActivity$interval[i]==average.interval$interval]
}
head(NewActivity)
test <- format(NewActivity$date, "%A")
test[1]
wday(NewActivity$date[1])
if(wday(NewActivity$date) == c(2:6)) {
test2 <- c("weekday")
} else {
test2 <- c("weekend")
}
for(i in 1:17568)
if(wday(NewActivity$date) == c(2, 3, 4, 5, 6)) {
test2 <- c("weekday")
} else {
test2 <- c("weekend")
}
for(i in 1:17568)
if(wday(NewActivity$date[i]) == 2 |wday(NewActivity$date[i]) == 3| wday(NewActivity$date[i]) == 4| wday(NewActivity$date[i]) == 5|wday(NewActivity$date[i]) == 6) {
test2[i] <- c("weekday")
} else {
test2[i] <- c("weekend")
}
head(test)
head(test2)
tail(test)
tail(test2)
table(test2)
test3 <- sample(test, 200)
head(test3)
for(i in 1:200)
if(wday(test3[i]) == c(2 | 3| 4| 5| 6) {
test4[i] <- c("weekday")
} else {
test4[i] <- c("weekend")
}
for(i in 1:200)
if(wday(test3[i]) == c(2 | 3| 4| 5| 6)) {
test4[i] <- c("weekday")
} else {
test4[i] <- c("weekend")
}
for(i in 1:200)
if(wday(test3[i]) == 2 | 3| 4| 5| 6) {
test4[i] <- c("weekday")
} else {
test4[i] <- c("weekend")
}
test3 <- as.Date(test3)
test3 <- sample(NewActivity$date, 200)
test3 <- NewActivity$date[sample(1:17568, 200), ]
dates <- NewActivity$date
dates <- as.Date(NewActivity$date)
str(dates)
dates2 <- sample(dates, 200)
str(dates2)
for(i in 1:200)
if(wday(dates2[i]) == 2 | 3| 4| 5| 6) {
test4[i] <- c("weekday")
} else {
test4[i] <- c("weekend")
}
for(i in 1:200)
dates3 <- NULL
if(wday(dates2[i]) == 2 | 3| 4| 5| 6) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
for(i in 1:200)
if(wday(dates2[i]) == 2 | 3| 4| 5| 6) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
head(dates2, 50)
head(dates3, 50)
table(dates3)
head((format(dates2), "%A"), 50)
dates4 <- format(dates2, "%A")
head(dates4)
wday(dates4[2])
wday(dates2[2])
wday(dates2[1])
for(i in 1:200)
if(wday(dates2[i]) > 1) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
head(dates4, 20)
head(dates3, 20)
wday(dates2[8])
for(i in 1:200)
if(wday(dates2[i]) > 1 & < 7) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
for(i in 1:200)
if(1 < wday(dates2[i]) < 7) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
for(i in 1:200)
if(wday(dates2[i]) >1 & wday(dates2[i]) < 7) {
dates3[i] <- c("weekday")
} else {
dates3[i] <- c("weekend")
}
head(dates4, 20)
head(dates3, 20)
for(i in 1:17568)
if(wday(NewActivity$date[i]) >1 & wday(NewActivity$date[i]) <7) {
NewActivity$weekday[i] <- c("weekday")
} else {
NewActivity$weekday[i] <- c("weekend")
}
head(NewActivity)
head(NewActivity$weekday, 20)
table(NewActivity$weekday)
class("NewActivity$weekday")
table(test2)
NewActivity$weekday <- as.factor(NewActivity$weekday)
str(NewActivity)
NewActivityInterval <- ddply(NewActivity, .(interval), summarise, mean_steps = mean(steps, na.rm = TRUE))
NewActivityInterval <- ddply(NewActivity, .(interval, weekday), summarise, mean_steps = mean(steps, na.rm = TRUE))
head(NewActivityInterval)
library(ggplot2)
NewActivityInterval$interval2 <- as.integer(as.character(NewActivityInterval$interval))
str(NewActivity)
str(NewActivityInterval)
g <- ggplot(NewActivityInterval, aes(x = interval2, y = mean_steps))
g + geom_line() + facet_grid(weekday ~ .)
g <- ggplot(NewActivityInterval, aes(x = interval2, y = mean_steps))
g + geom_line() + facet_grid(~ weekday, nrow=2)
g <- ggplot(NewActivityInterval, aes(x = interval2, y = mean_steps))
g + geom_line() + facet_wrap(~ weekday, nrow=2)
g <- ggplot(NewActivityInterval, aes(x = interval2, y = mean_steps))
g + geom_line() + facet_wrap(~ weekday, nrow=2) + labs(x = "Interval")
+ labs(y = "Number of Steps") + labs(title = "Figure 1: Average Number of Steps Per Interval by Weekday and Weekend")
g <- ggplot(NewActivityInterval, aes(x = interval2, y = mean_steps))
g + geom_line() + facet_wrap(~ weekday, nrow=2) + labs(x = "Interval") + labs(y = "Number of Steps") + labs(title = "Figure 1: Average Number of Steps Per Interval by Weekday and Weekend")
